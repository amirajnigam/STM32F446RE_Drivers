#include "stm32f446xx.h"
#include<string.h>

/*
 * PB14- SPI2_MISO
 * PB15- SPI2_MOSI
 * PB13- SPI2_SCLK
 * PB12- SPI2_NSS
 * ALT function mode : 5
 * GPIO Port B
 */

void delay(void)
{
	for(uint32_t i = 0; i < 500000/2; i++ );
}

void SPI2_GPIOInits(void)
{
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
	SPIPins.GPIO_PinConfig. GPIO_PinSpeed = GPIO_SPEED_FAST;


	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
	GPIO_Init(&SPIPins);

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIO_Init(&SPIPins);

/*
* Note: For this application we don't want to use MISO, We are sending data from master to slave only.
* So, don't configure those pins and they are free for other users.
*/

//	//MISO
//	SPIPins.GPIO_PinConfig.GPIO_PinNUmber = GPIO_PIN_NO_14;
//	GPIO_Init(&SPIPins);

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	GPIO_Init(&SPIPins);

}

void SPI2_Inits(void)
{
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8; //Generates SCLK of 2MHz
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware Slave management Enable for NSS Pin

	SPI_Init(&SPI2handle);
}

void GPIO_ButtonInit(void)
{
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration

	GPIOBtn.pGPIOx =GPIOA;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;

	GPIO_Init(&GPIOBtn);
}



int main(void)
{
	char user_data[] = "Hello world";

	GPIO_ButtonInit();

	//This function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();

	/*
	 * making SSOE 1 does NSS output enable.
	 * this NSS pin is automatically managed by the hardware.
	 * i.e. when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI2,ENABLE);

	while(1)
	{
		/*whenever the button is pressed, the button state will become high and the function will
		*return 1 and not of 1 is 0 and control will come out of the loop.*/
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0));

		//to avoid the debouncing related issue
		delay();

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);

		//first send the length information
		uint8_t dataLen = strlen(user_data);
		SPI_SendData(SPI2,&dataLen,1); //1 byte data


		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data, strlen(user_data));

		//lets confirm SPI is not busy, 0 is not busy and 1 is busy
		while(SPI_GetFlagStatus(SPI2,SPI_BSY_FLAG));

		//disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
	}
	return 0;
}



/*
 * Note1: When Hardware Slave Management is selected. Master NSS and Slave SS pin is connected.
 * Remember the Slave board will not respond unless the SS is pulled to low and master is going to
 * do that. So for Hardware Slave selection SSM = 0 and when SPE = 1 i.e. when SPI peripheral is
 * enabled the NSS will be pulled to low automatically.Makes NSS = 0. This feature is available is
 * STM Microcontroller.(Refer Hardware NSS management in data sheet(1328))
 *
 *Note2: For Master
 *		 NSS output will be enable when SSOE = 1(SSOE:Slave select output enable)
 *		 when SSOE = 1,
 *		 NSS = 0, when SPE = 1(NSS pulled to low automatically when we enable the peripheral)
 *		 NSS = 1, when SPE = 0
 *
 */

