#include "stm32f446xx.h"
#include "stm32f446xx_gpio_driver.h"

#define		LOW			0
#define		BTN_PRESSED LOW

void delay(void)
{
	for(uint32_t i = 0; i < 900000/2; i++);
}

int main(void)
{
	GPIO_Handle_t GpioLed, GPIOBtn;

	GpioLed.pGPIOx = GPIOA;

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_5;
	GpioLed.GPIO_PinConfig.GPIO_PinMode =   GPIO_MODE_OUT;
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed  = GPIO_SPEED_FAST;
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_PIN_PU;

	GPIO_PeriClockControl(GPIOA, ENABLE);

	GPIO_Init(&GpioLed);
	/*
	 * Note: No Open drain or Push pull pin configuration because push button already has pull up resistor.
	 */


	GPIOBtn.pGPIOx = GPIOC;
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode =   GPIO_MODE_IN;
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed  = GPIO_SPEED_FAST;
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl= GPIO_NO_PUPD;

	GPIO_PeriClockControl(GPIOC, ENABLE);

	GPIO_Init(&GPIOBtn);
	//GPIO_WriteToOutputPort(GPIOA,1);


	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13) == BTN_PRESSED)
		{
			delay();	//When button is pressed, it will wait until the debouncing of button gets over.Otherwise loop will execute multiple times.
			GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NO_5);
		}
	return 0;
}

