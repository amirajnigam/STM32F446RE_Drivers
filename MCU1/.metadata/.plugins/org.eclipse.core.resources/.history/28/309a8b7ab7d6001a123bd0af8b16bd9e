#ifndef INC_STM32F446XX_SPI_DRIVER_H_
#define INC_STM32F446XX_SPI_DRIVER_H_

#include "stm32f446xx.h"


/* Configuration Structure for SPIx peripheral */

typedef	struct
{
	uint8_t SPI_DeviceMode;            //Master or Slave
	uint8_t SPI_BusConfig;			   //Simplex, Half or full duplex
	uint8_t SPI_SclkSpeed;			   //Set the clock speed
	uint8_t SPI_DFF;				   //Data Frame rate format
	uint8_t SPI_CPOL;				   //Clock Polarity
	uint8_t SPI_CPHA;				   //Clock Phase
	uint8_t SPI_SSM;				   //Slave Select management
}SPI_Config_t;

/* Handle Structure for SPIx peripheral*/

typedef struct
{
	SPI_RegDef_t		*pSPIx;   /* This will hold the base address of SPIx(x:0,1,2) peripheral */
	SPI_Config_t		SPIConfig;
}SPI_Handle_t;


/*
 * @SPI_Device mode
 */
#define SPI_DEVICE_MODE_MASTER			1
#define SPI_DEVICE_MODE_SLAVE			0

/*
 * @SPI_BusConfig
 */

#define SPI_BUS_CONFIG_FD				1 			//Full Duplex
#define SPI_BUS_CONFIG_HD				2			// Half duplex
#define SPI_BUS_CONFIG_SIMPLEX_RXONLY	3			//Simplex Recieve Only

/*
* @SPI_SclkSpeed
*/

#define SPI_SCLK_SPEED_DIV2				0
#define SPI_SCLK_SPEED_DIV4				1
#define SPI_SCLK_SPEED_DIV8				2
#define SPI_SCLK_SPEED_DIV16			3
#define SPI_SCLK_SPEED_DIV32			4
#define SPI_SCLK_SPEED_DIV64			5
#define SPI_SCLK_SPEED_DIV128			6
#define SPI_SCLK_SPEED_DIV256			7


/*
* @SPI_DFF
*/

#define SPI_DFF_8BITS		0
#define SPI_DFF_16BITS		1

/*
* @SPI_CPOL
*/
#define SPI_CPOL_HIGH		1
#define SPI_CPOL_LOW		2

/*
* @SPI_CPHA
*/
#define SPI_CPHA_HIGH		1
#define SPI_CPHA_LOW		2

/*
* @SPI_SSM
*/
#define SPI_SSM_EN			1
#define SPI_SSM_DI			0

/*
* SPI related status flag definitions
*/
#define SPI_TXE_FLAG		(1<<SPI_SR_TXE)
#define SPI_RXNE_FLAG		(1<<SPI_SR_RXNE)
#define SPI_BSY_FLAG		(1<<SPI_SR_BSY)






/***************************************************************************************
 *                          APIs supported by this drive
 *        For more information about the APIs check the function definition
 * ************************************************************************************/

/*Peripheral Clock Setup*/

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi);

/*Init and De-init*/

void SPI_Init(SPI_Handle_t *pSPIHandle);
void SPI_DeInit(SPI_RegDef_t *pSPIx);    /*SPI-RegDef_t Structure will be the pointer to the base address of the SPi peripheral which is of type SPI_RegDef*/

/*Data Send and Recieve*/

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len);     /*pTxBuffer(pointer to Tx buffer) - The user will give the pointer to data. So, it will store the user provided pointer.*/
void SPI_RecieveData(SPI_RegDef_t *pSPIx, uint8_t *pRxBuffer, uint32_t Len);  /* How much Length of data, always define length with uint32_t*/


/* IRQ Configuration and ISR handling*/

void SPI_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi);
void SPI_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority);
void SPI_IRQHandling(SPI_Handle_t *pHandle);

/*
* other Peripheral Control APIs
*/

void SPI_PeripheralControl(SPI_RegDef_t *pSPIx,uint8_t EnorDi);

void SPI_SSIConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi);

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx,uint8_t EnorDi);

































#endif /* INC_STM32F446XX_SPI_DRIVER_H_ */
