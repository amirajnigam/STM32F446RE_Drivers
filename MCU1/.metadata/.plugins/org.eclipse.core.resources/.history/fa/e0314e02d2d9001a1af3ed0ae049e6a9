/*
 * stm32f446xx_gpio_driver.c
 *
 *  Created on: Jul 23, 2020
 *      Author: amira
 */

#include "stm32f446xx_gpio_driver.h"

/*peripheral Clock Setup */

/******************************************************************************
 * @fn              - GPIO_PeriClock COntrol
 *
 * @brief           - This function enables or disables peripheral clock for the given GPIO port
 *
 * @param[in]       -base address of the GPIO peripheral
 * @param[in]       -ENABLE or DISABLE macros
 *
 *
 * @return          - none
 *
 *
 * @Note            - none
 *
 */

void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pGPIOx == GPIOA)
		{
			GPIOA_PCLK_EN();
		}else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_EN();
		}else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_EN();
		}else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_EN();
		}else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_EN();
		}else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_EN();
		}else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_EN();
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_EN();
		}
	}
	else
	{
		if(pGPIOx == GPIOA)
		{
			GPIOA_PCLK_DI();
		}else if (pGPIOx == GPIOB)
		{
			GPIOB_PCLK_DI();
		}else if (pGPIOx == GPIOC)
		{
			GPIOC_PCLK_DI();
		}else if (pGPIOx == GPIOD)
		{
			GPIOD_PCLK_DI();
		}else if (pGPIOx == GPIOE)
		{
			GPIOE_PCLK_DI();
		}else if (pGPIOx == GPIOF)
		{
			GPIOF_PCLK_DI();
		}else if (pGPIOx == GPIOG)
		{
			GPIOG_PCLK_DI();
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}


/* Init and De-init*/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
	uint32_t temp = 0; //temp.register

	//enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle -> pGPIOx, ENABLE);

	//1. configure the mode of GPIO Pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Multiplied by 2 because each pin takes two bit fields
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); /*Clearing the field,we want 11 so 0x3 is 22 in binary so it's ~ will be 00.*/
		pGPIOHandle->pGPIOx->MODER |= temp;  //Setting
		/*Note: In Embedded programming dont use assignment operator instead use bitwise OR*/

	}else
	{
		//this part will code later .(interupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_FT)
		{
			//1. Configure the Falling trigger selection register(FTSR)
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

			//2. Clear the corresponding RTSR bit because we want FTSR enabled bit only.
			EXTI->RTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

		}

		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RT)
		{
			//1. Configure the Rising trigger selection register(RTSR)
			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

			//2. Clear the corresponding FTSR bit because we want RTSR enabled bit only.
			EXTI->FTSR &= ~(1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_IT_RFT)
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

			EXTI->RTSR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);

		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		// To understand check solved example in notebook
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
		uint8_t	port = GPIO_BASEADDR_TO_CODE(pGPIOHandle -> pGPIOx);
		SYSCFG_PCLK_EN();
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);


		//3. enable the exti interrupt delivery using Interrupt mask register(IMR)
		EXTI->IMR |= (1<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}
	temp = 0;

	//2. configure the speed

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << (2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));   // clearing
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;

	temp = 0;
	//3. configure the pupd setting
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));  // clearing
	pGPIOHandle->pGPIOx->PUPDR |= temp;

	temp = 0;
	//4. configure the optype

	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	pGPIOHandle->pGPIOx->OTYPER  &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // clearing only 1 bit field
	pGPIOHandle->pGPIOx->OTYPER |= temp;

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
	{
		//configure the alt function registers
		uint32_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2) ); //clearing
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2) );

	}
}

/******************************************************************************
 * @fn              - GPIO_DeInit
 *
 * @brief           -
 *
 * @param[in]       -
 * @param[in]       -
 *
 *
 * @return          - none
 *
 *
 * @Note            - Deinitialize means to make bit as 1 first and then zero
 *
 */

void GPIO_DeInit(GPIO_RegDef_t *pGPIOx)
{
	if(pGPIOx == GPIOA)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOB)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOC)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOD)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOE)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOF)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOG)
	{
		GPIOA_REG_RESET();
	}else if (pGPIOx == GPIOH)
	{
		GPIOA_REG_RESET();
}

}


/* Data read and Write*/

/******************************************************************************
 * @fn              - GPIO_ReadFromInputPin
 *
 * @brief           -
 *
 * @param[in]       -base address of the GPIO peripheral
 * @param[in]       -Pin Number
 *
 *
 * @return          - 0 or 1
 *
 *
 * @Note            - IDR value will be right shifted by the amount which is mentioned in pin number in order to extract
	 * 				  or get that bit position to the least significant bit position of the IDR register and we care only
	 * 				  the LSB, so all other bit position are masked with zero i.e. make every bit as zero except LSB and type casting
	 * 				  to uint8_t because data type is of uint_8
 *
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	uint8_t value;
	value = (uint8_t)((pGPIOx-> IDR  >> PinNumber) & 0x00000001);
	return value;
}


uint16_t GPIO_ReadFromInputPort(GPIO_RegDef_t *pGPIOx)
{
	uint16_t value;
	value = (uint16_t)pGPIOx->IDR;
	return value;
}

/******************************************************************************
 * @fn              - GPIO_WriteToOutputPin
 *
 * @brief           -
 *
 * @param[in]       -
 * @param[in]       -
 *
 *
 * @return          -
 *
 *
 * @Note            -
 *
 */
void GPIO_WriteToOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber, uint8_t Value)
{
	if(Value == GPIO_PIN_SET)
	{
		//write 1 to the output register at the bit filed corresponding to the pin number
		pGPIOx-> ODR |= (1 << PinNumber);
	}else
	{
		//write 0
		pGPIOx-> ODR &= ~(1 << PinNumber);
	}
}
void GPIO_WriteToOutputPort(GPIO_RegDef_t *pGPIOx, uint16_t Value)
{
	pGPIOx->ODR = Value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
	pGPIOx->ODR ^= (1<< PinNumber);
}



/*IRQ Configuration and ISR handling*/
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi)
{

}

void GPIO_IRQHandling(uint8_t PinNumber)
{

}
