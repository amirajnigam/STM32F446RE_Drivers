
#ifndef INC_STM32F446XX_H_
#define INC_STM32F446XX_H_

#define __vo volatile

#include<stdint.h>


/*Base address of Flash and SRAM memories*/
/*addresses are always unsigned values i.e. U or type cast (uint32_t)*/

#define FLASH_BASEADDR							0x08000000U   /*Main memory i.e. Embedded flash memory base address, total 7 sectors i.e. 512 kbytes*/
#define SRAM1_BASEADDR							0x20000000U   /*SRAM1 of 112 Kbytes*/
#define SRAM2_BASEADDR							0x2001C000U   /*SRAM2 0f 16 Kbytes can be calculated by 112*1024 = 114688 i.e. 1 C000 in hex.So add 0x2000 0000 + 1 C000 to get its base address*/
#define ROM										0x1FFF0000    /*System memory in Flash module organization, 30 Kbytes*/
#define SRAM									SRAM1_BASEADDR

/*AHBx and APBx BUS Peripheral base addresses*/

#define PERIPH_BASEADDR								0x40000000U  /*Base address of the Bus*/
#define APB1PERIPH_BASEADDR							PERIPH_BASEADDR
#define APB2PERIPH_BASEADDR							0x40010000U  /*Base address of the APB2 Bus*/
#define AHB1PERIPH_BASEADDR							0x40020000U  /*Base address of the AHB1 Bus*/
#define AHB2PERIPH_BASEADDR							0x550000000U  /*Base address of the AHB2 Bus*/


/*Base address of Peripherals which are hanging on AHB1 bus*/

#define GPIOA_BASEADDR							(AHB1PERIPH_BASEADDR + 0x0000)	 /*GPIO present on ABH1 bus (ABH1base address + offset)*/
#define GPIOB_BASEADDR							(AHB1PERIPH_BASEADDR + 0x0400)
#define GPIOC_BASEADDR							(AHB1PERIPH_BASEADDR + 0x0800)
#define GPIOD_BASEADDR							(AHB1PERIPH_BASEADDR + 0x0C00)
#define GPIOE_BASEADDR							(AHB1PERIPH_BASEADDR + 0x1000)
#define GPIOF_BASEADDR							(AHB1PERIPH_BASEADDR + 0x1400)
#define GPIOG_BASEADDR							(AHB1PERIPH_BASEADDR + 0x1800)
#define GPIOH_BASEADDR							(AHB1PERIPH_BASEADDR + 0x1C00)

#define RCC_BASEADDR							(AHB1PERIPH_BASEADDR + 0x3800)



/*Base address of Peripherals which are hanging on APB1 bus*/

#define I2C1_BASEADDR							(APB1PERIPH_BASEADDR + 0x5400)
#define I2C2_BASEADDR							(APB1PERIPH_BASEADDR + 0x5800)
#define I2C3_BASEADDR							(APB1PERIPH_BASEADDR + 0x5C00)

#define SPI1_BASEADDR							(APB2PERIPH_BASEADDR + 0x3000)
#define SPI2_BASEADDR							(APB1PERIPH_BASEADDR + 0x3800)
#define SPI3_BASEADDR							(APB1PERIPH_BASEADDR + 0x3C00)
#define SPI4_BASEADDR							(APB2PERIPH_BASEADDR + 0x3400)

#define USART2_BASEADDR							(APB1PERIPH_BASEADDR + 0x4400)
#define USART3_BASEADDR							(APB1PERIPH_BASEADDR + 0x4800)
#define UART4_BASEADDR							(APB1PERIPH_BASEADDR + 0x4C00)
#define UART5_BASEADDR							(APB1PERIPH_BASEADDR + 0x5000)

/*Base address of Peripherals which are hanging on APB2 bus*/

#define SPI1_BASEADDR							(APB2PERIPH_BASEADDR + 0x3000)

#define USART1_BASEADDR							(APB2PERIPH_BASEADDR + 0x1000)
#define USART6_BASEADDR							(APB2PERIPH_BASEADDR + 0x1400)

#define EXTI_BASEADDR							(APB2PERIPH_BASEADDR + 0x3C00)
#define SYSCFG_BASEADDR							(APB2PERIPH_BASEADDR + 0x3800)


/******************peripheral register definition structures************************/

/* Note1: Registers of a MCU are specific to a MCU*
 * e.g: Number of Registers of SPI peripheral of STM32F4x family of  MCUs may be different(more or less)
 * compared to number of registers of SPI peripheral of STM32Lx or STM32F0x family of MCUs
 * PLease check your device RM
 *
 * Note2: Volatile qualifier is used because the member element of register are actually used to refer
 * the registers of peripheral. Some registers may be highly volatile in nature.
 *
 */

typedef struct
{
	__vo uint32_t MODER;          /* port mode register                               Address offset : 0x00*/
	__vo uint32_t OTYPER;    	  /* GPIO port output type register 				  Address offset : 0x04*/
	__vo uint32_t OSPEEDR;        /* GPIO port output speed register 				  Address offset : 0x08*/
	__vo uint32_t PUPDR;    	  /* GPIO port pull-up/pull-down register			  Address offset : 0x0C*/
	__vo uint32_t IDR;            /* GPIO port input data register					  Address offset : 0x10 */
	__vo uint32_t ODR;            /* GPIO port output data register					  Address offset : 0x14*/
	__vo uint32_t BSRR;           /* GPIO port bit set/reset register				  Address offset : 0x18*/
	__vo uint32_t LCKR;           /* GPIO port configuration lock register			  Address offset : 0x1C*/
	__vo uint32_t AFR[2];	      /* AFR[0]:GPIO alternate function low register. AFR[1]: GPIO alternate function high register	 Address offset : 0x20 for AFRL,  Address offset : 0x24 for AFRH*/
}GPIO_RegDef_t;

/*
* peripheral register definition structure for EXTI
*/
typedef	struct
{
	__vo uint32_t IMR;			/*Interrupt Mask Register				Address offset: 0x00*/
	__vo uint32_t EMR;			/*Event Mask Register					Address offset: 0x04*/
	__vo uint32_t RTSR;			/*Rising trigger selection Register		Address offset: 0x08*/
	__vo uint32_t FTSR;			/*Falling trigger selection Register	Address offset: 0x0C*/
	__vo uint32_t SWIER;		/*Software Interrupt Event Register		Address offset: 0x10*/
	__vo uint32_t PR;			/*Pending Register						Address offset: 0x14*/
}EXTI_RegDef_t;

/*
* peripheral register definition structure for SYSCFG
*/

typedef struct
{
	__vo uint32_t MEMRMP;		/*SYSCFG Memory remap register								Address offset: 0x00*/
	__vo uint32_t PMC;			/*SYSCFG Peripheral Mode Configuration register				Address offset: 0x04*/
	__vo uint32_t EXTICR[4];	/*SYSCFG external interrupt Configuration register 1		Address offset: 0x08-0x14*/
	uint32_t	  RESERVED[2];	/*															RESERVED, 0x18-0x1C*/
	__vo uint32_t CMPCR;		/*SYSCFG Compensation Cell Control register					Address offset: 0x20*/
	uint32_t	  RESERVED[2];  /*															RESERVED, 0x24-0x28*/
	__vo uint32_t CFGR;			/*SYSCFG Configuration register								Address offset: 0x2C*/
}SYSCFG_RegDef_t;


typedef struct
{
	__vo uint32_t CR;
	__vo uint32_t PLLCFGR;
	__vo uint32_t CGFR;
	__vo uint32_t CIR;
	__vo uint32_t AHB1RSTR;
	__vo uint32_t AHB2RSTR;
	__vo uint32_t AHB3RSTR;
	uint32_t	  RESERVED0;
	__vo uint32_t APB1RSTR;
	__vo uint32_t APB2RSTR;
	uint32_t      RESERVED1[2];
	__vo uint32_t AHB1ENR;
	__vo uint32_t AHB2ENR;
	__vo uint32_t AHBR3ENR;
	uint32_t 	  RESERVED2;
	__vo uint32_t APB1ENR;
	__vo uint32_t APB2ENR;
	uint32_t      RESERVED3[2];
	__vo uint32_t AHB1LPENR;
	__vo uint32_t AHB2LPENR;
	__vo uint32_t AHB3LPENR;
	__vo uint32_t RESERVED4;
	__vo uint32_t APB1LPENR;
	__vo uint32_t APB2LPENR;
	uint32_t      RESERVED5[2];
	__vo uint32_t BDCR;
	__vo uint32_t CSR;
	uint32_t      RESERVED6[2];
	__vo uint32_t SSCGR;
	__vo uint32_t PLLI2SCFGR;
	__vo uint32_t PLLSAICFGR;
	__vo uint32_t DCKCFGR;
	__vo uint32_t CKGATENR;
	__vo uint32_t DCKCFGR2;
} RCC_RegDef_t;

/*
* peripheral register definition structure for SPI
*/

typedef struct
{
	__vo uint32_t CR1;					/* SPI control register 1 Address: 0x00 */
	__vo uint32_t CR2;					/* SPI control register 2 Address: 0x04 */
	__vo uint32_t SR;					/* SPI status register Address: 0x08 */
	__vo uint32_t DR;					/* SPI data register Address: 0x0C */
	__vo uint32_t CRCPR;				/* SPI CRC polynomial register Address: 0x10 */
	__vo uint32_t RXCRC;				/* SPI RX CRC register 1 Address: 0x14 */
	__vo uint32_t TXCRCR;				/* SPI TX CRC register 1 Address: 0x18 */
	__vo uint32_t I2SCFGR;				/* SPI_I2S configuration register 1 Address: 0x1C */
	__vo uint32_t I2SPR;				/* SPI_I2S prescaler register Address: 0x20 */
}SPI_RegDef_t;


/* peripheral definitions(Peripheral base addresses type casted to xxx_RegDef_t)
 *
 * Note:Type casted value of GPIOA base address, Type casted to the pointer of the
 * GPIO register definition structure
 */

#define GPIOA					((GPIO_RegDef_t*)GPIOA_BASEADDR)
#define GPIOB					((GPIO_RegDef_t*)GPIOB_BASEADDR)
#define GPIOC					((GPIO_RegDef_t*)GPIOC_BASEADDR)
#define GPIOD					((GPIO_RegDef_t*)GPIOD_BASEADDR)
#define GPIOE					((GPIO_RegDef_t*)GPIOE_BASEADDR)
#define GPIOF					((GPIO_RegDef_t*)GPIOF_BASEADDR)
#define GPIOG					((GPIO_RegDef_t*)GPIOG_BASEADDR)
#define GPIOH					((GPIO_RegDef_t*)GPIOH_BASEADDR)

#define RCC						((RCC_RegDef_t*)RCC_BASEADDR) /* RCC-BASEADDR(address) is type casted to the register definition structure*/

#define EXTI					((EXTI_RegDef_t*)EXTI_BASEADDR)

#define SYSCFG					((SYSCFG_RegDef_t*)SYSCFG_BASEADDR)

#define SPI1					((SPI_RegDef_t*)SPI1_BASEADDR)
#define SPI2					((SPI_RegDef_t*)SPI2_BASEADDR)
#define SPI3					((SPI_RegDef_t*)SPI3_BASEADDR)

/*Clock Enable Macros for GPIOx peripherals*/

#define GPIOA_PCLK_EN()			( RCC->AHB1ENR |= (1<<0) )  /* We can use peripeheral definition RCC and we can dereference that to AHB1ENR(responsible for clock enable/disable of all GPIOx), turn ON(1) )th bit position */
#define GPIOB_PCLK_EN()			( RCC->AHB1ENR |= (1<<1) )
#define GPIOC_PCLK_EN()			( RCC->AHB1ENR |= (1<<2) )
#define GPIOD_PCLK_EN()			( RCC->AHB1ENR |= (1<<3) )
#define GPIOE_PCLK_EN()			( RCC->AHB1ENR |= (1<<4) )
#define GPIOF_PCLK_EN()			( RCC->AHB1ENR |= (1<<5) )
#define GPIOG_PCLK_EN()			( RCC->AHB1ENR |= (1<<6) )
#define GPIOH_PCLK_EN()			( RCC->AHB1ENR |= (1<<7) )

/*Clock Enable macros for I2Cx peripherals*/

#define I2C1_PCLK_EN()			( RCC->APB1ENR |= (1 << 21) ) /* Making 21st bit as 1 in APB1ENR register*/
#define I2C2_PCLK_EN()			( RCC->APB1ENR |= (1 << 22) )
#define I2C3_PCLK_EN()			( RCC->APB1ENR |= (1 << 23) )

/*Clock Enable macros for SPIx peripherals*/

#define SPI1_PCLK_EN()			( RCC->APB2ENR |= ( 1 << 12) )
#define SPI2_PCLK_EN()			( RCC->APB1ENR |= ( 1 << 14) )
#define SPI3_PCLK_EN()			( RCC->APB1ENR |= ( 1 << 15) )
#define SPI4_PCLK_EN()			( RCC->APB2ENR |= ( 1 << 13) )


/*Clock Enable macros for USARTx peripherals*/

#define USART1_PCLK_EN()		( RCC->APB2ENR |= ( 1 << 4) )
#define USART2_PCLK_EN()		( RCC->APB1ENR |= ( 1 << 17) )
#define USART3_PCLK_EN()		( RCC->APB1ENR |= ( 1 << 18) )
#define UART4_PCLK_EN()		    ( RCC->APB1ENR |= ( 1 << 19) )
#define UART5_PCLK_EN()		    ( RCC->APB1ENR |= ( 1 << 20) )
#define USART6_PCLK_EN()		( RCC->APB2ENR |= ( 1 << 5) )

/*Clock Enable macros for SYSCFG peripherals*/

#define SYSCFG_PCLK_EN()		( RCC->APB2ENR |= ( 1 << 14) )



/*Clock disable Macros for GPIOx peripherals*/

#define GPIOA_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<0) )
#define GPIOB_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<1) )
#define GPIOC_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<2) )
#define GPIOD_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<3) )
#define GPIOE_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<4) )
#define GPIOF_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<5) )
#define GPIOG_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<6) )
#define GPIOH_PCLK_DI()			( RCC->AHB1ENR &=  ~(1<<7) )

/*Clock disable macros for I2Cx peripherals*/

#define I2C1_PCLK_DI()			( RCC->APB1ENR &= ~(1 << 21) )
#define I2C2_PCLK_DI()			( RCC->APB1ENR &= ~(1 << 22) )
#define I2C3_PCLK_DI()			( RCC->APB1ENR &= ~(1 << 23) )

/*Clock disable macros for SPIx peripherals*/

#define SPI1_PCLK_DI()			( RCC->APB2ENR &= ~( 1 << 12) )
#define SPI2_PCLK_DI()			( RCC->APB1ENR &= ~( 1 << 14) )
#define SPI3_PCLK_DI()			( RCC->APB1ENR &= ~( 1 << 15) )
#define SPI4_PCLK_DI()			( RCC->APB2ENR &= ~( 1 << 13) )

/*Clock disable macros for USARTx peripherals*/

#define USART1_PCLK_DI()		( RCC->APB2ENR &= ~( 1 << 4) )
#define USART2_PCLK_DI()		( RCC->APB1ENR &= ~( 1 << 17) )
#define USART3_PCLK_DI()		( RCC->APB1ENR &= ~( 1 << 18) )
#define UART4_PCLK_DI())		( RCC->APB1ENR &= ~( 1 << 19) )
#define UART5_PCLK_DI()		    ( RCC->APB1ENR &= ~( 1 << 20) )
#define USART6_PCLK_DI()		( RCC->APB2ENR &= ~( 1 << 5) )


/*Clock disable macros for SYSCFG peripherals*/

#define SYSCFG_PCLK_DI()		( RCC->APB2ENR &= ~( 1 << 14) )

/*
 * Macros to reset GPIOx peripherals
 *
 * Note:- Deinitialize means to make bit as 1 first and then zero.
 *
 * We can do this with do while condition zero loop in macros
 * This is a technique in 'C' programming to execute multiple 'C' statements using single 'C' macros
 */
#define GPIOA_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<0));        (RCC->AHB1RSTR &= ~(1<<0));}while(0)
#define GPIOB_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<1));        (RCC->AHB1RSTR &= ~(1<<1));}while(0)
#define GPIOC_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<2));        (RCC->AHB1RSTR &= ~(1<<2));}while(0)
#define GPIOD_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<3));        (RCC->AHB1RSTR &= ~(1<<3));}while(0)
#define GPIOE_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<4));        (RCC->AHB1RSTR &= ~(1<<4));}while(0)
#define GPIOF_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<5));        (RCC->AHB1RSTR &= ~(1<<5));}while(0)
#define GPIOG_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<6));        (RCC->AHB1RSTR &= ~(1<<6));}while(0)
#define GPIOH_REG_RESET()  		do{(RCC->AHB1RSTR |= (1<<7));        (RCC->AHB1RSTR &= ~(1<<7));}while(0)


/*
 * Return port code for given GPIOx base address
 *
 * This macro return a code(between 0 to 7) for a given GPIO base address(x)
 *
 * Note:Below technique is called C-conditional operators refer lecture 111 (10:30)
 */

#define GPIO_BASEADDR_TO_CODE(x)			((x == GPIOA) ? 0 :\
											(x == GPIOB) ? 1 :\
											(x == GPIOC) ? 2 :\
											(x == GPIOD) ? 3 :\
											(x == GPIOE) ? 4 :\
											(x == GPIOF) ? 5 :\
											(x == GPIOG) ? 6 :\
											(x == GPIOH) ? 7 :\
											(x == GPIOI) ? 8 :0)


//some generic macros

#define ENABLE				1
#define DISABLE				0
#define SET					ENABLE
#define RESET				DISABLE
#define GPIO_PIN_SET		SET
#define GPIO_PIN_RESET		RESET
#define FLAG_RESET			RESET
#define FLAG_SET			SET

/*****************************************************************************************************
 *                                Bit position definitions of SPI peripherals
 * ***************************************************************************************************/

/*
* Bit position definitions SPI_CR1
*/


#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
#define SPI_CR1_SPE			6
#define SPI_CR1_LSBFIRST	7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CECEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15


/*
* Bit position definitions SPI_CR1
*/


#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
#define SPI_CR2_FRF			4
#define SPI_CR2_ERRIE		5
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_TXEIE		7

/*
* Bit position definitions SPI_SR
*/


#define SPI_SR_RXNE			0
#define SPI_SR_TXE			1
#define SPI_SR_CHSIDE		2
#define SPI_SR_UDR			3
#define SPI_SR_CRCERR		4
#define SPI_SR_MODF			5
#define SPI_SR_OVR			6
#define SPI_SR_BSY			7
#define SPI_SR_FRE			8

/*
 * Macros to reset SPIx peripherals
 *
 * Note:- Deinitialize means to make bit as 1 first and then zero.
 *
 * We can do this with do while condition zero loop in macros
 * This is a technique in 'C' programming to execute multiple 'C' statements using single 'C' macros
 */

#define SPI1_REG_RESET()  		do{(RCC->APB2RSTR |= (1<<12));        (RCC->APB2RSTR &= ~(1<<12));}while(0)
#define SPI2_REG_RESET()  		do{(RCC->APB1RSTR |= (1<<14));        (RCC->APB1RSTR &= ~(1<<14));}while(0)
#define SPI3_REG_RESET()  		do{(RCC->APB1RSTR |= (1<<15));        (RCC->APB1RSTR &= ~(1<<15));}while(0)
#define SPI4_REG_RESET()  		do{(RCC->APB2RSTR |= (1<<13));        (RCC->APB2RSTR &= ~(1<<13));}while(0)



#include "stm32f446xx_gpio_driver.h"
#include "stm32f446xx_spi_driver.h"



#endif /* INC_STM32F446XX_H_ */
